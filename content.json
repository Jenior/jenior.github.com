{"meta":{"title":"无所畏惧","subtitle":null,"description":null,"author":"Jenior","url":"https://jenior.github.io"},"pages":[{"title":"","date":"2017-10-30T09:15:49.501Z","updated":"2017-10-30T09:15:49.501Z","comments":false,"path":"categories/index.html","permalink":"https://jenior.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-10-30T09:17:58.879Z","updated":"2017-10-30T09:17:58.879Z","comments":false,"path":"tags/index.html","permalink":"https://jenior.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker部署","slug":"Docker部署","date":"2017-12-25T06:13:47.000Z","updated":"2017-12-25T08:45:30.651Z","comments":true,"path":"2017/12/25/Docker部署/","link":"","permalink":"https://jenior.github.io/2017/12/25/Docker部署/","excerpt":"","text":"Docker介绍 Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。 一个完整的Docker有以下几个部分组成： dockerClient客户端 Docker Daemon守护进程 Docker Image镜像 DockerContainer容器 特性 使应用的打包与部署自动化 创建轻量、私密的PAAS环境 实现自动化测试和持续的集成/部署 部署与扩展webapp、数据库和后台服务 局限 Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用 LXC是基于cgroup等linux kernel功能的，因此container的guest系统只能是linux base的 隔离性相比KVM之类的虚拟化方案还是有些欠缺，所有container公用一部分的运行库 网络管理相对简单，主要是基于namespace隔离 cgroup的cpu和cpuset提供的cpu功能相比KVM的等虚拟化方案相比难以度量(所以dotcloud主要是按内存收费) Docker对disk的管理比较有限 container随着用户进程的停止而销毁，container中的log等用户数据不便收集 Docker环境搭建Linux 发行版本是RHEL或CentOS，便需要7或之后版本 1$ uname -r 系统架构必须是64位 1$ uname -m 检查系统，安装适合的Docker安装包 123$ curl https://get.docker.com &gt; /tmp/install.sh$ chmod +x /tmp/install.sh$ /tmp/install.sh Docker运行时需要特殊的权限，所以默认执行命令时前面必须加上sudo，省略命令前面加上sudo的方法就是将用户加入用户组。将用户加入用户组等同于赋予他root权限。因此，要了解机器是不是共享的，否则有安全隐患。 1$ sudo usermod -aG docker 用户 加入用户组后，需要先注销再登入系统然后是启动docker服务 1$ sudo service docker restart Docker部署项目java 环境搭建12$ docker search java$ docker pull java:8 创建镜像Docker 使用 Dockerfile 文件格式来指定 image 层 12345FROM java:8VOLUME /tmpADD push.jar push.jarEXPOSE 7888ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;push.jar&quot;,&quot;--server.port=7888&quot;] 解释下配置文件： FROM 指定运行环境 VOLUME 指定了临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到 Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录 ADD 项目的 jar 文件作为 push.jar 添加到容器 EXPOSE 暴露端口 ENTRYPOINT 执行项目 push.jar。为了缩短 Tomcat 启动时间，添加一个系统属性指向 “/dev/urandom” 作为 Entropy Source 并指定应用端口为7888","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://jenior.github.io/tags/docker/"}]},{"title":"SpringBoot配置","slug":"SpringBoot配置","date":"2017-11-24T02:48:38.000Z","updated":"2017-11-24T02:58:23.041Z","comments":true,"path":"2017/11/24/SpringBoot配置/","link":"","permalink":"https://jenior.github.io/2017/11/24/SpringBoot配置/","excerpt":"","text":"1、SpringBoot介绍Spring Boot是伴随着Spring4.0 产生的，是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。Spring Boot让我们的Spring应用变得更轻量化。比如：你可以仅仅依靠一个Java类来运行Spring引用。你也可以打包你的应用为jar并通过使用java –jar来运行你的Spring Web应用。Spring Boot的主要优点： 为所有Spring开发者更快的入门 开箱即用，提供各种默认配置来简化项目配置 嵌入Tomcat, Jetty Undertow 而且不需要部署他们 没有冗余代码生成和xml配置的要求 提供生产指标,健壮检查和外部化配置 尽可能的根据项目依赖来自动配置Spring框架 当然，springboot也存在它的缺点： 依赖太多，随便的一个Spring Boot应用都有好几十M 缺少服务的注册和发现等解决方案，可以结合springcloud的组件使用。 缺少监控集成方案、安全管理方案（有但简单，满足不了生产的指标 ： Actuator）","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://jenior.github.io/tags/java/"}]}]}