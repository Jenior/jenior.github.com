<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无所畏惧</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jenior.github.io/"/>
  <updated>2017-12-25T06:59:18.151Z</updated>
  <id>https://jenior.github.io/</id>
  
  <author>
    <name>Jenior</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker部署</title>
    <link href="https://jenior.github.io/2017/12/25/Docker%E9%83%A8%E7%BD%B2/"/>
    <id>https://jenior.github.io/2017/12/25/Docker部署/</id>
    <published>2017-12-25T06:13:47.000Z</published>
    <updated>2017-12-25T06:59:18.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h2><p> Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。</p><p> 一个完整的Docker有以下几个部分组成：</p><ol><li>dockerClient客户端</li><li>Docker Daemon守护进程</li><li>Docker Image镜像</li><li>DockerContainer容器</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>使应用的打包与部署自动化</li><li>创建轻量、私密的PAAS环境</li><li>实现自动化测试和持续的集成/部署</li><li>部署与扩展webapp、数据库和后台服务</li></ul><h3 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h3><ul><li>Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用</li><li>LXC是基于cgroup等linux kernel功能的，因此container的guest系统只能是linux base的</li><li>隔离性相比KVM之类的虚拟化方案还是有些欠缺，所有container公用一部分的运行库</li><li>网络管理相对简单，主要是基于namespace隔离</li><li>cgroup的cpu和cpuset提供的cpu功能相比KVM的等虚拟化方案相比难以度量(所以dotcloud主要是按内存收费)</li><li>Docker对disk的管理比较有限</li><li>container随着用户进程的停止而销毁，container中的log等用户数据不便收集</li></ul><h2 id="Docker环境搭建"><a href="#Docker环境搭建" class="headerlink" title="Docker环境搭建"></a>Docker环境搭建</h2><p>Linux 发行版本是RHEL或CentOS，便需要7或之后版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ uname -r</div></pre></td></tr></table></figure><p>系统架构必须是64位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ uname -m</div></pre></td></tr></table></figure><p>检查系统，安装适合的Docker安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ curl https://get.docker.com &gt; /tmp/install.sh</div><div class="line">$ chmod +x /tmp/install.sh</div><div class="line">$ /tmp/install.sh</div></pre></td></tr></table></figure><p>Docker运行时需要特殊的权限，所以默认执行命令时前面必须加上sudo，省略命令前面加上sudo的方法就是将用户加入用户组。将用户加入用户组等同于赋予他root权限。因此，要了解机器是不是共享的，否则有安全隐患。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo usermod -aG docker 用户</div></pre></td></tr></table></figure><p>加入用户组后，需要先注销再登入系统<br>然后是启动docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service docker restart</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker介绍&quot;&gt;&lt;a href=&quot;#Docker介绍&quot; class=&quot;headerlink&quot; title=&quot;Docker介绍&quot;&gt;&lt;/a&gt;Docker介绍&lt;/h2&gt;&lt;p&gt; Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的
      
    
    </summary>
    
    
      <category term="java" scheme="https://jenior.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置</title>
    <link href="https://jenior.github.io/2017/11/24/SpringBoot%E9%85%8D%E7%BD%AE/"/>
    <id>https://jenior.github.io/2017/11/24/SpringBoot配置/</id>
    <published>2017-11-24T02:48:38.000Z</published>
    <updated>2017-11-24T02:58:23.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、SpringBoot介绍"><a href="#1、SpringBoot介绍" class="headerlink" title="1、SpringBoot介绍"></a>1、SpringBoot介绍</h2><p>Spring Boot是伴随着Spring4.0 产生的，是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。<br>Spring Boot让我们的Spring应用变得更轻量化。比如：你可以仅仅依靠一个Java类来运行Spring引用。你也可以打包你的应用为jar并通过使用java –jar来运行你的Spring Web应用。<br>Spring Boot的主要优点：</p><ul><li>为所有Spring开发者更快的入门</li><li>开箱即用，提供各种默认配置来简化项目配置</li><li>嵌入Tomcat, Jetty Undertow 而且不需要部署他们</li><li>没有冗余代码生成和xml配置的要求</li><li>提供生产指标,健壮检查和外部化配置</li><li>尽可能的根据项目依赖来自动配置Spring框架</li></ul><p>当然，springboot也存在它的缺点：</p><ul><li>依赖太多，随便的一个Spring Boot应用都有好几十M</li><li>缺少服务的注册和发现等解决方案，可以结合springcloud的组件使用。</li><li>缺少监控集成方案、安全管理方案（有但简单，满足不了生产的指标 ： Actuator）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、SpringBoot介绍&quot;&gt;&lt;a href=&quot;#1、SpringBoot介绍&quot; class=&quot;headerlink&quot; title=&quot;1、SpringBoot介绍&quot;&gt;&lt;/a&gt;1、SpringBoot介绍&lt;/h2&gt;&lt;p&gt;Spring Boot是伴随着Spring4
      
    
    </summary>
    
    
      <category term="java" scheme="https://jenior.github.io/tags/java/"/>
    
  </entry>
  
</feed>
